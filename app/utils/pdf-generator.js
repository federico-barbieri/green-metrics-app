// app/utils/pdf-generator.js
import jsPDF from 'jspdf';
import { format } from 'date-fns';

export async function generateSustainabilityReportPDF(reportData) {
  try {
    const doc = new jsPDF();
    const { storeName, metrics, sustainabilityScore, generatedAt } = reportData;
    const { current } = metrics;
    
    // Set font
    doc.setFont('helvetica');
    
    // Header
    doc.setFontSize(24);
    doc.setTextColor(0, 168, 107); // Green color
    doc.text('🌱 Sustainability Report', 105, 30, { align: 'center' });
    
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(storeName, 105, 45, { align: 'center' });
    
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on ${format(generatedAt, 'PPP')}`, 105, 55, { align: 'center' });
    
    // Sustainability Score Box
    doc.setFillColor(0, 168, 107);
    doc.rect(20, 70, 170, 30, 'F');
    
    doc.setFontSize(32);
    doc.setTextColor(255, 255, 255);
    doc.text(sustainabilityScore.toString(), 105, 90, { align: 'center' });
    
    doc.setFontSize(14);
    doc.text('Overall Sustainability Score', 105, 95, { align: 'center' });
    
    // Executive Summary
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Executive Summary', 20, 120);
    
    doc.setFontSize(11);
    doc.setTextColor(60, 60, 60);
    const summaryText = `Your store achieved a sustainability score of ${sustainabilityScore}/100, indicating ${getScoreDescription(sustainabilityScore)} performance in sustainable practices.`;
    doc.text(doc.splitTextToSize(summaryText, 170), 20, 130);
    
    // Key Metrics
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Key Metrics', 20, 160);
    
    // Metrics in a grid layout
    const metrics_data = [
      { label: 'Sustainable Materials', value: `${current.sustainableMaterialsPercent.toFixed(1)}%`, x: 20, y: 175 },
      { label: 'Local Products', value: `${current.localProductsPercent.toFixed(1)}%`, x: 110, y: 175 },
      { label: 'Packaging Ratio', value: `${current.avgPackagingRatio.toFixed(2)}:1`, x: 20, y: 200 },
      { label: 'Avg Delivery Distance', value: `${current.avgDeliveryDistanceKm.toFixed(1)} km`, x: 110, y: 200 }
    ];
    
    metrics_data.forEach(metric => {
      // Metric box
      doc.setFillColor(248, 249, 250);
      doc.rect(metric.x, metric.y, 80, 20, 'F');
      doc.setDrawColor(0, 168, 107);
      doc.rect(metric.x, metric.y, 80, 20);
      
      // Value
      doc.setFontSize(14);
      doc.setTextColor(0, 168, 107);
      doc.text(metric.value, metric.x + 40, metric.y + 8, { align: 'center' });
      
      // Label
      doc.setFontSize(9);
      doc.setTextColor(100, 100, 100);
      doc.text(metric.label, metric.x + 40, metric.y + 16, { align: 'center' });
    });
    
    // Recommendations
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('🎯 Recommendations', 20, 240);
    
    const recommendations = generateRecommendations(current);
    let yPos = 250;
    
    recommendations.forEach((rec, index) => {
      if (yPos > 270) {
        doc.addPage();
        yPos = 30;
      }
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`${index + 1}. ${rec.title}`, 20, yPos);
      
      doc.setFontSize(10);
      doc.setTextColor(60, 60, 60);
      const descText = doc.splitTextToSize(rec.description, 170);
      doc.text(descText, 25, yPos + 5);
      
      yPos += 15 + (descText.length * 3);
    });
    
    // Footer
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by Green Metrics App', 105, 285, { align: 'center' });
    
    return Buffer.from(doc.output('arraybuffer'));
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error(`PDF generation failed: ${error.message}`);
  }
}

function getScoreDescription(score) {
  if (score >= 80) return 'excellent';
  if (score >= 60) return 'good';
  if (score >= 40) return 'moderate';
  return 'needs improvement';
}

function generateRecommendations(metrics) {
  const recommendations = [];
  
  if (metrics.sustainableMaterialsPercent < 50) {
    recommendations.push({
      title: '🌱 Increase Sustainable Materials',
      description: `Current: ${metrics.sustainableMaterialsPercent.toFixed(1)}%. Target: 60%+. Partner with suppliers offering recycled or organic materials to boost your sustainability score.`
    });
  }
  
  if (metrics.localProductsPercent < 30) {
    recommendations.push({
      title: '🏘️ Source More Locally',
      description: `Current: ${metrics.localProductsPercent.toFixed(1)}%. Target: 40%+. Identify local manufacturers to reduce carbon footprint and support local economy.`
    });
  }
  
  if (metrics.avgPackagingRatio > 1.5) {
    recommendations.push({
      title: '📦 Optimize Packaging',
      description: `Current ratio: ${metrics.avgPackagingRatio.toFixed(2)}:1. Target: <1.2:1. Use minimal, lightweight packaging and consider compostable materials.`
    });
  }
  
  if (metrics.avgDeliveryDistanceKm > 50) {
    recommendations.push({
      title: '🚚 Reduce Delivery Distance',
      description: `Current: ${metrics.avgDeliveryDistanceKm.toFixed(1)} km. Target: <40 km. Consider regional fulfillment centers or local pickup options.`
    });
  }
  
  if (recommendations.length === 0) {
    recommendations.push({
      title: '🎉 Excellent Performance!',
      description: 'Your store is performing well across all sustainability metrics. Keep up the great work!'
    });
  }
  
  return recommendations;
}