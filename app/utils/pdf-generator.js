// app/utils/pdf-generator.js
import PDFDocument from 'pdfkit';
import { format } from 'date-fns';

export async function generateSustainabilityReportPDF(reportData) {
  try {
    const { storeName, metrics, sustainabilityScore, generatedAt } = reportData;
    const { current } = metrics;
    
    return new Promise((resolve, reject) => {
      const doc = new PDFDocument();
      const chunks = [];
      
      // Collect the PDF data
      doc.on('data', chunk => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));
      doc.on('error', reject);
      
      // Header
      doc.fontSize(24)
         .fillColor('#00A86B')
         .text('Sustainability Report', { align: 'center' });
      
      doc.moveDown(0.5);
      doc.fontSize(16)
         .fillColor('black')
         .text(storeName, { align: 'center' });
      
      doc.fontSize(12)
         .fillColor('gray')
         .text(`Generated on ${format(generatedAt, 'PPP')}`, { align: 'center' });
      
      doc.moveDown(1);
      
      // Sustainability Score Box
      doc.rect(50, doc.y, 500, 80)
         .fillAndStroke('#00A86B', '#00A86B');
      
      doc.fontSize(36)
         .fillColor('white')
         .text(sustainabilityScore.toString(), 50, doc.y - 65, { 
           width: 500, 
           align: 'center' 
         });
      
      doc.fontSize(14)
         .text('Overall Sustainability Score', 50, doc.y - 30, { 
           width: 500, 
           align: 'center' 
         });
      
      doc.moveDown(2);
      
      // Executive Summary
      doc.fontSize(16)
         .fillColor('black')
         .text('Executive Summary');
      
      doc.moveDown(0.5);
      doc.fontSize(11)
         .fillColor('#3C3C3C')
         .text(`Your store achieved a sustainability score of ${sustainabilityScore}/100, indicating ${getScoreDescription(sustainabilityScore)} performance in sustainable practices.`);
      
      doc.moveDown(1);
      
      // Key Metrics
      doc.fontSize(16)
         .fillColor('black')
         .text('Key Metrics');
      
      doc.moveDown(0.5);
      
      const metricsData = [
        { label: 'Sustainable Materials', value: `${current.sustainableMaterialsPercent.toFixed(1)}%` },
        { label: 'Local Products', value: `${current.localProductsPercent.toFixed(1)}%` },
        { label: 'Packaging Ratio', value: `${current.avgPackagingRatio.toFixed(2)}:1` },
        { label: 'Average Delivery Distance', value: `${current.avgDeliveryDistanceKm.toFixed(1)} km` }
      ];
      
      metricsData.forEach((metric, index) => {
        const x = 50 + (index % 2) * 250;
        const y = doc.y + Math.floor(index / 2) * 60;
        
        // Metric box
        doc.rect(x, y, 200, 50)
           .stroke('#00A86B');
        
        doc.fontSize(18)
           .fillColor('#00A86B')
           .text(metric.value, x + 10, y + 10, { width: 180, align: 'center' });
        
        doc.fontSize(10)
           .fillColor('gray')
           .text(metric.label, x + 10, y + 35, { width: 180, align: 'center' });
      });
      
      doc.y += 120;
      doc.moveDown(1);
      
      // Recommendations
      doc.fontSize(16)
         .fillColor('black')
         .text('Recommendations');
      
      doc.moveDown(0.5);
      
      const recommendations = generateRecommendations(current);
      
      recommendations.forEach((rec, index) => {
        doc.fontSize(12)
           .fillColor('black')
           .text(`${index + 1}. ${rec.title}`);
        
        doc.fontSize(10)
           .fillColor('#3C3C3C')
           .text(rec.description, { indent: 20 });
        
        doc.moveDown(0.5);
      });
      
      // Footer
      doc.fontSize(8)
         .fillColor('lightgray')
         .text('Generated by Green Metrics App', { align: 'center' });
      
      doc.end();
    });
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error(`PDF generation failed: ${error.message}`);
  }
}

function getScoreDescription(score) {
  if (score >= 80) return 'excellent';
  if (score >= 60) return 'good';
  if (score >= 40) return 'moderate';
  return 'needs improvement';
}

function generateRecommendations(metrics) {
  const recommendations = [];
  
  if (metrics.sustainableMaterialsPercent < 50) {
    recommendations.push({
      title: 'Increase Sustainable Materials',
      description: `Current: ${metrics.sustainableMaterialsPercent.toFixed(1)}%. Target: 60%+. Partner with suppliers offering recycled or organic materials.`
    });
  }
  
  if (metrics.localProductsPercent < 30) {
    recommendations.push({
      title: 'Source More Locally',
      description: `Current: ${metrics.localProductsPercent.toFixed(1)}%. Target: 40%+. Identify local manufacturers to reduce carbon footprint.`
    });
  }
  
  if (metrics.avgPackagingRatio > 1.5) {
    recommendations.push({
      title: 'Optimize Packaging',
      description: `Current ratio: ${metrics.avgPackagingRatio.toFixed(2)}:1. Target: <1.2:1. Use minimal, lightweight packaging.`
    });
  }
  
  if (metrics.avgDeliveryDistanceKm > 50) {
    recommendations.push({
      title: 'Reduce Delivery Distance',
      description: `Current: ${metrics.avgDeliveryDistanceKm.toFixed(1)} km. Target: <40 km. Consider regional fulfillment centers.`
    });
  }
  
  if (recommendations.length === 0) {
    recommendations.push({
      title: 'Excellent Performance!',
      description: 'Your store is performing well across all sustainability metrics. Keep up the great work!'
    });
  }
  
  return recommendations;
}